# scripts/send_report.py
from pathlib import Path
import smtplib
from email.message import EmailMessage
from datetime import datetime
from dotenv import load_dotenv
import os

ROOT = Path(__file__).resolve().parents[1]
PDF  = ROOT / "data" / "processed" / "weekly_brief.pdf"

def req(name: str) -> str:
    v = os.getenv(name)
    if not v:
        raise SystemExit(f"Missing {name} in .env")
    return v

def main():
    # Load .env from project root
    load_dotenv(ROOT / ".env")

    host = req("SMTP_HOST")
    port = int(os.getenv("SMTP_PORT", "587"))
    user = req("SMTP_USER")
    pwd  = req("SMTP_PASS")
    mail_from = os.getenv("MAIL_FROM", user)
    mail_to   = [x.strip() for x in os.getenv("MAIL_TO", "").split(",") if x.strip()]

    if not mail_to:
        raise SystemExit("MAIL_TO is empty in .env")
    if not PDF.exists():
        raise SystemExit(f"Missing PDF: {PDF}")

    # Build email with attachment
    msg = EmailMessage()
    msg["Subject"] = f"AquiferPulse weekly brief â€” {datetime.now().date()}"
    msg["From"] = mail_from
    msg["To"] = ", ".join(mail_to)
    msg.set_content("Attached: weekly brief PDF generated by AquiferPulse.")
    msg.add_attachment(PDF.read_bytes(),
                       maintype="application",
                       subtype="pdf",
                       filename=PDF.name)

    # Send
    with smtplib.SMTP(host, port, timeout=30) as s:
        s.starttls()
        s.login(user, pwd)
        s.send_message(msg)

    print(f"Sent {PDF} to: {', '.join(mail_to)}")

if __name__ == "__main__":
    main()
